(()=>{"use strict";var e={102:function(e,t,n){var o,r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},o(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=o(e),i=0;i<n.length;i++)"default"!==n[i]&&r(t,e,n[i]);return a(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.TerraCostViewProvider=void 0;const s=i(n(398));t.TerraCostViewProvider=class{_extensionUri;static viewType="terracostPanel";_webviewView;constructor(e){this._extensionUri=e}resolveWebviewView(e,t,n){this._webviewView=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(e=>{try{switch(e.command){case"calculateCosts":return void this._handleCalculateCosts(e.timeframe);case"getSuggestions":return void this._handleGetSuggestions(e.suggestionType,e.apiKey)}}catch(e){s.window.showErrorMessage(`Command failed: ${e instanceof Error?e.message:"Unknown error"}`)}})}_getHtmlForWebview(e){return`<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>TerraCost</title>\n    <style>\n        body { font-family: var(--vscode-font-family); margin: 10px; color: var(--vscode-foreground); }\n        .header { text-align: center; margin-bottom: 20px; padding-bottom: 16px; border-bottom: 1px solid var(--vscode-panel-border); }\n        .header h2 { color: var(--vscode-textLink-foreground); margin-bottom: 8px; }\n        .timeframe-selector { margin-bottom: 15px; }\n        .timeframe-selector select { width: 100%; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border); }\n        .tabs { display: flex; margin-bottom: 15px; border-bottom: 1px solid var(--vscode-panel-border); }\n        .tab-button { flex: 1; padding: 12px; border: none; background: none; cursor: pointer; color: var(--vscode-descriptionForeground); border-bottom: 2px solid transparent; }\n        .tab-button.active { color: var(--vscode-textLink-foreground); border-bottom-color: var(--vscode-textLink-foreground); }\n        .tab-pane { display: none; }\n        .tab-pane.active { display: block; }\n        .actions { margin-bottom: 15px; }\n        .btn { padding: 8px 16px; margin: 3px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }\n        .btn-primary { background: var(--vscode-button-background); color: var(--vscode-button-foreground); }\n        .content-area { min-height: 100px; border: 1px solid var(--vscode-panel-border); padding: 10px; background: var(--vscode-editor-background); }\n    </style>\n</head>\n<body>\n    <div class="container">\n        <div class="header">\n            <h2><img src="${e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"icon.png"))}" alt="TerraCost" style="width: 24px; height: 24px; vertical-align: middle; margin-right: 8px;">TerraCost</h2>\n            <p style="font-size: 12px; margin: 0;">Infrastructure Cost Estimation</p>\n        </div>\n\n        <div class="tabs">\n            <button class="tab-button active" data-tab="resources">ðŸ“Š Costs</button>\n            <button class="tab-button" data-tab="suggestions">ðŸ¤– AI</button>\n        </div>\n\n        <div class="tab-content">\n            <div id="resources-tab" class="tab-pane active">\n                <div class="timeframe-selector" style="margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">\n                    <label for="timeframe" style="white-space: nowrap;">Timeframe:</label>\n                    <select id="timeframe" style="flex: 1;">\n                        <option value="1m">1 Month</option>\n                        <option value="3m">3 Months</option>\n                        <option value="6m">6 Months</option>\n                        <option value="1y">1 Year</option>\n                        <option value="2y">2 Years</option>\n                    </select>\n                </div>\n                <div class="actions">\n                    <button id="calculate-btn" class="btn btn-primary" style="width: 100%;">Calculate</button>\n                </div>\n\n            </div>\n\n            <div id="suggestions-tab" class="tab-pane">\n                <div class="suggestion-selector" style="margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">\n                    <div style="min-width: 120px;">\n                        <label for="api-key" style="white-space: nowrap;">API Key ðŸ”‘:</label>\n                    </div>\n                    <input type="password" id="api-key" placeholder="sk-..." style="flex: 1; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);">\n                </div>\n                <div class="suggestion-selector" style="margin-bottom: 15px; display: flex; align-items: center; gap: 10px;">\n                    <div style="min-width: 120px;">\n                        <label for="suggestion-type" style="white-space: nowrap;">Suggestion Type:</label>\n                    </div>\n                    <select id="suggestion-type" style="flex: 1; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);">\n                        <option value="--savings">ðŸ’° Cost Savings Opportunities</option>\n                        <option value="--bestvalue">ðŸŽ¯ Best Value Configuration</option>\n                        <option value="--budget">ðŸ’µ Budget Optimization</option>\n                    </select>\n                </div>\n                <div class="budget-input" id="budget-input" style="display: none; margin-bottom: 15px;">\n                    <label for="budget-amount">Monthly Budget ($):</label>\n                    <input type="number" id="budget-amount" placeholder="50.0" step="0.01" min="0" style="width: 100%; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);">\n                </div>\n                <div class="actions">\n                    <button id="suggestions-btn" class="btn btn-primary" style="width: 100%;">Get Suggestions</button>\n                </div>\n                <div id="suggestions-content" class="content-area">\n                    <div style="text-align: center; color: #666;">\n                        <p><strong>ðŸ¤– AI Suggestions Ready</strong></p>\n                        <p>Enter your OpenAI API key above and select a suggestion type to get started.</p>\n                        <p style="font-size: 11px; margin-top: 10px;">Your API key is only used for this session and is not stored.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        // Restore active tab from state\n        const state = vscode.getState();\n        const activeTab = state?.activeTab || 'resources';\n        \n        // Set initial active tab\n        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n        document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));\n        \n        const activeButton = document.querySelector('[data-tab="' + activeTab + '"]');\n        const activePane = document.getElementById(activeTab + '-tab');\n        \n        if (activeButton && activePane) {\n            activeButton.classList.add('active');\n            activePane.classList.add('active');\n        } else {\n            // Fallback to resources tab if something goes wrong\n            document.querySelector('[data-tab="resources"]').classList.add('active');\n            document.getElementById('resources-tab').classList.add('active');\n        }\n        \n        document.querySelectorAll('.tab-button').forEach(button => {\n            button.addEventListener('click', () => {\n                const targetTab = button.getAttribute('data-tab');\n                \n                // Update active tab\n                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n                document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));\n                document.getElementById(targetTab + '-tab').classList.add('active');\n                \n                // Save active tab to state\n                vscode.setState({ ...state, activeTab: targetTab });\n            });\n        });\n\n        document.getElementById('calculate-btn').addEventListener('click', () => {\n            const timeframe = document.getElementById('timeframe').value;\n            vscode.postMessage({ command: 'calculateCosts', timeframe: timeframe });\n        });\n\n        // Handle suggestion type change to show/hide budget input\n        document.getElementById('suggestion-type').addEventListener('change', () => {\n            const suggestionType = document.getElementById('suggestion-type').value;\n            const budgetInput = document.getElementById('budget-input');\n            if (suggestionType === '--budget') {\n                budgetInput.style.display = 'block';\n            } else {\n                budgetInput.style.display = 'none';\n            }\n        });\n\n        document.getElementById('suggestions-btn').addEventListener('click', () => {\n            const apiKey = document.getElementById('api-key').value.trim();\n            if (!apiKey) {\n                alert('Please enter your OpenAI API key');\n                return;\n            }\n            \n            const suggestionType = document.getElementById('suggestion-type').value;\n            let args = suggestionType;\n            \n            if (suggestionType === '--budget') {\n                const budgetAmount = document.getElementById('budget-amount').value;\n                if (budgetAmount) {\n                    args = suggestionType + ' ' + budgetAmount;\n                }\n            }\n            \n            vscode.postMessage({ \n                command: 'getSuggestions', \n                suggestionType: args,\n                apiKey: apiKey\n            });\n        });\n\n\n    <\/script>\n</body>\n</html>`}async _handleCalculateCosts(e){try{const t=this.getWorkspaceFolder(),n=this.sanitizeTimeframe(e),o=(this.getTerraformDir(t),this.getTerracostExecutable()),r=s.window.createTerminal("TerraCost Terminal");r.show(),r.sendText(`chcp 65001; & "${o}" plan -t ${n} -f .`)}catch(e){const t=`Failed to calculate costs: ${e instanceof Error?e.message:"Unknown error"}`;s.window.showErrorMessage(t)}}async _handleGetSuggestions(e="--savings",t){try{const n=this.getWorkspaceFolder(),o=(this.getTerraformDir(n),this.getTerracostExecutable()),r=s.window.createTerminal("TerraCost Terminal");r.show(),t?r.sendText(`chcp 65001; $env:OPENAI_API_KEY = "${t}"; echo "API key set successfully"; & "${o}" suggest ${e}`):r.sendText(`chcp 65001; echo "No API key provided"; & "${o}" suggest ${e}`)}catch(e){const t=`Failed to get suggestions: ${e instanceof Error?e.message:"Unknown error"}`;s.window.showErrorMessage(t)}}getWorkspaceFolder(){const e=s.workspace.workspaceFolders?.[0];if(!e)throw new Error("No workspace folder found");return e}sanitizeTimeframe(e){if(!["1m","3m","6m","1y","2y"].includes(e))throw new Error(`Invalid timeframe: ${e}`);return e}getTerraformDir(e){return e.uri.fsPath}getTerracostExecutable(){return s.Uri.joinPath(this._extensionUri,"python","windows","terracost.exe").fsPath}}},265:function(e,t,n){var o,r=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},o(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=o(e),i=0;i<n.length;i++)"default"!==n[i]&&r(t,e,n[i]);return a(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){const t=new c.TerraCostViewProvider(e.extensionUri);e.subscriptions.push(s.window.registerWebviewViewProvider(c.TerraCostViewProvider.viewType,t))},t.deactivate=function(){};const s=i(n(398)),c=n(102)},398:e=>{e.exports=require("vscode")}},t={},n=function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports}(265);module.exports=n})();
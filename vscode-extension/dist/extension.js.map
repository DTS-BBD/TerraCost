{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://TerraCost/./src/webview/viewProvider.ts","webpack://TerraCost/./src/extension.ts","webpack://TerraCost/external commonjs \"vscode\"","webpack://TerraCost/webpack/bootstrap","webpack://TerraCost/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport class TerraCostViewProvider implements vscode.WebviewViewProvider {\n    public static readonly viewType = 'terracostPanel';\n    private _webviewView?: vscode.WebviewView;\n\n    constructor(private readonly _extensionUri: vscode.Uri) {\n    }\n\n    public resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n        this._webviewView = webviewView;\n        webviewView.webview.options = {\n            enableScripts: true,\n            localResourceRoots: [this._extensionUri]\n        };\n\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n        webviewView.webview.onDidReceiveMessage(\n            message => {\n                try {\n                    switch (message.command) {\n                        case 'calculateCosts':\n                            this._handleCalculateCosts(message.timeframe);\n                            return;\n                        case 'getSuggestions':\n                            this._handleGetSuggestions(message.suggestionType, message.apiKey);\n                            return;\n                    }\n                } catch (error) {\n                    vscode.window.showErrorMessage(`Command failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                }\n            }\n        );\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>TerraCost</title>\n    <style>\n        body { font-family: var(--vscode-font-family); margin: 10px; color: var(--vscode-foreground); }\n        .header { text-align: center; margin-bottom: 20px; padding-bottom: 16px; border-bottom: 1px solid var(--vscode-panel-border); }\n        .header h2 { color: var(--vscode-textLink-foreground); margin-bottom: 8px; }\n        .timeframe-selector { margin-bottom: 15px; }\n        .timeframe-selector select { width: 100%; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border); }\n        .tabs { display: flex; margin-bottom: 15px; border-bottom: 1px solid var(--vscode-panel-border); }\n        .tab-button { flex: 1; padding: 12px; border: none; background: none; cursor: pointer; color: var(--vscode-descriptionForeground); border-bottom: 2px solid transparent; }\n        .tab-button.active { color: var(--vscode-textLink-foreground); border-bottom-color: var(--vscode-textLink-foreground); }\n        .tab-pane { display: none; }\n        .tab-pane.active { display: block; }\n        .actions { margin-bottom: 15px; }\n        .btn { padding: 8px 16px; margin: 3px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }\n        .btn-primary { background: var(--vscode-button-background); color: var(--vscode-button-foreground); }\n        .content-area { min-height: 100px; border: 1px solid var(--vscode-panel-border); padding: 10px; background: var(--vscode-editor-background); }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h2><img src=\"${webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'icon.png'))}\" alt=\"TerraCost\" style=\"width: 24px; height: 24px; vertical-align: middle; margin-right: 8px;\">TerraCost</h2>\n            <p style=\"font-size: 12px; margin: 0;\">Infrastructure Cost Estimation</p>\n        </div>\n\n        <div class=\"tabs\">\n            <button class=\"tab-button active\" data-tab=\"resources\">ðŸ“Š Costs</button>\n            <button class=\"tab-button\" data-tab=\"suggestions\">ðŸ¤– AI</button>\n        </div>\n\n        <div class=\"tab-content\">\n            <div id=\"resources-tab\" class=\"tab-pane active\">\n                <div class=\"timeframe-selector\" style=\"margin-bottom: 15px; display: flex; align-items: center; gap: 10px;\">\n                    <label for=\"timeframe\" style=\"white-space: nowrap;\">Timeframe:</label>\n                    <select id=\"timeframe\" style=\"flex: 1;\">\n                        <option value=\"1m\">1 Month</option>\n                        <option value=\"3m\">3 Months</option>\n                        <option value=\"6m\">6 Months</option>\n                        <option value=\"1y\">1 Year</option>\n                        <option value=\"2y\">2 Years</option>\n                    </select>\n                </div>\n                <div class=\"actions\">\n                    <button id=\"calculate-btn\" class=\"btn btn-primary\" style=\"width: 100%;\">Calculate</button>\n                </div>\n\n            </div>\n\n            <div id=\"suggestions-tab\" class=\"tab-pane\">\n                <div class=\"suggestion-selector\" style=\"margin-bottom: 15px; display: flex; align-items: center; gap: 10px;\">\n                    <div style=\"min-width: 120px;\">\n                        <label for=\"api-key\" style=\"white-space: nowrap;\">API Key ðŸ”‘:</label>\n                    </div>\n                    <input type=\"password\" id=\"api-key\" placeholder=\"sk-...\" style=\"flex: 1; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);\">\n                </div>\n                <div class=\"suggestion-selector\" style=\"margin-bottom: 15px; display: flex; align-items: center; gap: 10px;\">\n                    <div style=\"min-width: 120px;\">\n                        <label for=\"suggestion-type\" style=\"white-space: nowrap;\">Suggestion Type:</label>\n                    </div>\n                    <select id=\"suggestion-type\" style=\"flex: 1; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);\">\n                        <option value=\"--savings\">ðŸ’° Cost Savings Opportunities</option>\n                        <option value=\"--bestvalue\">ðŸŽ¯ Best Value Configuration</option>\n                        <option value=\"--budget\">ðŸ’µ Budget Optimization</option>\n                    </select>\n                </div>\n                <div class=\"budget-input\" id=\"budget-input\" style=\"display: none; margin-bottom: 15px;\">\n                    <label for=\"budget-amount\">Monthly Budget ($):</label>\n                    <input type=\"number\" id=\"budget-amount\" placeholder=\"50.0\" step=\"0.01\" min=\"0\" style=\"width: 100%; padding: 6px; background: var(--vscode-input-background); color: var(--vscode-input-foreground); border: 1px solid var(--vscode-input-border);\">\n                </div>\n                <div class=\"actions\">\n                    <button id=\"suggestions-btn\" class=\"btn btn-primary\" style=\"width: 100%;\">Get Suggestions</button>\n                </div>\n                <div id=\"suggestions-content\" class=\"content-area\">\n                    <div style=\"text-align: center; color: #666;\">\n                        <p><strong>ðŸ¤– AI Suggestions Ready</strong></p>\n                        <p>Enter your OpenAI API key above and select a suggestion type to get started.</p>\n                        <p style=\"font-size: 11px; margin-top: 10px;\">Your API key is only used for this session and is not stored.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        // Restore active tab from state\n        const state = vscode.getState();\n        const activeTab = state?.activeTab || 'resources';\n        \n        // Set initial active tab\n        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n        document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));\n        \n        const activeButton = document.querySelector('[data-tab=\"' + activeTab + '\"]');\n        const activePane = document.getElementById(activeTab + '-tab');\n        \n        if (activeButton && activePane) {\n            activeButton.classList.add('active');\n            activePane.classList.add('active');\n        } else {\n            // Fallback to resources tab if something goes wrong\n            document.querySelector('[data-tab=\"resources\"]').classList.add('active');\n            document.getElementById('resources-tab').classList.add('active');\n        }\n        \n        document.querySelectorAll('.tab-button').forEach(button => {\n            button.addEventListener('click', () => {\n                const targetTab = button.getAttribute('data-tab');\n                \n                // Update active tab\n                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n                document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));\n                document.getElementById(targetTab + '-tab').classList.add('active');\n                \n                // Save active tab to state\n                vscode.setState({ ...state, activeTab: targetTab });\n            });\n        });\n\n        document.getElementById('calculate-btn').addEventListener('click', () => {\n            const timeframe = document.getElementById('timeframe').value;\n            vscode.postMessage({ command: 'calculateCosts', timeframe: timeframe });\n        });\n\n        // Handle suggestion type change to show/hide budget input\n        document.getElementById('suggestion-type').addEventListener('change', () => {\n            const suggestionType = document.getElementById('suggestion-type').value;\n            const budgetInput = document.getElementById('budget-input');\n            if (suggestionType === '--budget') {\n                budgetInput.style.display = 'block';\n            } else {\n                budgetInput.style.display = 'none';\n            }\n        });\n\n        document.getElementById('suggestions-btn').addEventListener('click', () => {\n            const apiKey = document.getElementById('api-key').value.trim();\n            if (!apiKey) {\n                alert('Please enter your OpenAI API key');\n                return;\n            }\n            \n            const suggestionType = document.getElementById('suggestion-type').value;\n            let args = suggestionType;\n            \n            if (suggestionType === '--budget') {\n                const budgetAmount = document.getElementById('budget-amount').value;\n                if (budgetAmount) {\n                    args = suggestionType + ' ' + budgetAmount;\n                }\n            }\n            \n            vscode.postMessage({ \n                command: 'getSuggestions', \n                suggestionType: args,\n                apiKey: apiKey\n            });\n        });\n\n\n    </script>\n</body>\n</html>`;\n    }\n\n    private async _handleCalculateCosts(timeframe: string) {\n        try {\n            const workspaceFolder = this.getWorkspaceFolder();\n            const sanitizedTimeframe = this.sanitizeTimeframe(timeframe);\n            const terraformDir = this.getTerraformDir(workspaceFolder);\n            const terracostPath = this.getTerracostExecutable();\n\n            const terminal = vscode.window.createTerminal('TerraCost Terminal');\n            terminal.show();\n            terminal.sendText(`chcp 65001; & \"${terracostPath}\" plan -t ${sanitizedTimeframe} -f .`);\n        } catch (error) {\n            const errorMsg = `Failed to calculate costs: ${error instanceof Error ? error.message : 'Unknown error'}`;\n            vscode.window.showErrorMessage(errorMsg);\n        }\n    }\n\n    private async _handleGetSuggestions(suggestionType: string = '--savings', apiKey?: string) {\n        try {\n            const workspaceFolder = this.getWorkspaceFolder();\n            const terraformDir = this.getTerraformDir(workspaceFolder);\n            const terracostPath = this.getTerracostExecutable();\n\n            const terminal = vscode.window.createTerminal('TerraCost Terminal');\n            terminal.show();\n            \n            // Set the API key and run the command in a single session\n            if (apiKey) {\n                terminal.sendText(`chcp 65001; $env:OPENAI_API_KEY = \"${apiKey}\"; echo \"API key set successfully\"; & \"${terracostPath}\" suggest ${suggestionType}`);\n            } else {\n                terminal.sendText(`chcp 65001; echo \"No API key provided\"; & \"${terracostPath}\" suggest ${suggestionType}`);\n            }\n        } catch (error) {\n            const errorMsg = `Failed to get suggestions: ${error instanceof Error ? error.message : 'Unknown error'}`;\n            vscode.window.showErrorMessage(errorMsg);\n        }\n    }\n\n    private getWorkspaceFolder(): vscode.WorkspaceFolder {\n        const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n        if (!workspaceFolder) {\n            throw new Error('No workspace folder found');\n        }\n        return workspaceFolder;\n    }\n\n    private sanitizeTimeframe(timeframe: string): string {\n        const validTimeframes = ['1m', '3m', '6m', '1y', '2y'];\n        if (!validTimeframes.includes(timeframe)) {\n            throw new Error(`Invalid timeframe: ${timeframe}`);\n        }\n        return timeframe;\n    }\n\n    private getTerraformDir(workspaceFolder: vscode.WorkspaceFolder): string {\n        return workspaceFolder.uri.fsPath;\n    }\n\n    private getTerracostExecutable(): string {\n        return vscode.Uri.joinPath(this._extensionUri, 'python', 'windows', 'terracost.exe').fsPath;\n    }\n\n\n}","import * as vscode from 'vscode';\r\nimport { TerraCostViewProvider } from './webview/viewProvider';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    const provider = new TerraCostViewProvider(context.extensionUri);\r\n    \r\n    context.subscriptions.push(\r\n        vscode.window.registerWebviewViewProvider(TerraCostViewProvider.viewType, provider)\r\n    );\r\n}\r\n\r\n\r\n\r\nexport function deactivate() {}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["_extensionUri","static","_webviewView","constructor","resolveWebviewView","webviewView","context","_token","this","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","message","command","_handleCalculateCosts","timeframe","_handleGetSuggestions","suggestionType","apiKey","error","vscode","window","showErrorMessage","Error","asWebviewUri","Uri","joinPath","workspaceFolder","getWorkspaceFolder","sanitizedTimeframe","sanitizeTimeframe","terracostPath","getTerraformDir","getTerracostExecutable","terminal","createTerminal","show","sendText","errorMsg","workspace","workspaceFolders","includes","uri","fsPath","provider","TerraCostViewProvider","extensionUri","subscriptions","push","registerWebviewViewProvider","viewType","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}